{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Govindraj\\\\Desktop\\\\Sem2 Mini-Project\\\\OpenBook-main\\\\src\\\\App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport Main from './Components/Main';\nimport './Components/style.css';\nimport LoginPage from './Components/LoginPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PrivateRoute(_ref) {\n  let {\n    element,\n    isAuthenticated\n  } = _ref;\n  return isAuthenticated ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 38\n  }, this);\n}\n\n_c = PrivateRoute;\n\nfunction App() {\n  // Define the checkAuthenticated function\n  function checkAuthenticated() {\n    // Implement your authentication logic here\n    // Return true if the user is authenticated, false otherwise\n    // For example, you might check for a token in localStorage or a session cookie\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n\n  const isAuthenticated = checkAuthenticated();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/Main\",\n        element: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 43\n        }, this),\n        isAuthenticated: isAuthenticated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PrivateRoute\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/Govindraj/Desktop/Sem2 Mini-Project/OpenBook-main/src/App.js"],"names":["React","BrowserRouter","Router","Route","Routes","Navigate","Main","LoginPage","PrivateRoute","element","isAuthenticated","App","checkAuthenticated","token","localStorage","getItem"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiDC,QAAjD,QAAiE,kBAAjE;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAO,wBAAP;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;;;AAEA,SAASC,YAAT,OAAoD;AAAA,MAA9B;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAA8B;AAClD,SAAOA,eAAe,GAAGD,OAAH,gBAAa,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAnC;AACD;;KAFQD,Y;;AAKT,SAASG,GAAT,GAAe;AACb;AACF,WAASC,kBAAT,GAA8B;AAC5B;AACA;AACA;AACA,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,WAAO,CAAC,CAACF,KAAT;AACD;;AAEC,QAAMH,eAAe,GAAGE,kBAAkB,EAA1C;AACA,sBACE;AAAA,2BAQA,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,OAAO,eAAE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAc,QAAA,IAAI,EAAC,OAAnB;AAA2B,QAAA,OAAO,eAAE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBAApC;AAA8C,QAAA,eAAe,EAAEF;AAA/D;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AARA,mBADF;AAgBD;;MA3BQC,G;AA6BT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport Main from './Components/Main';\nimport './Components/style.css';\nimport LoginPage from './Components/LoginPage';\n\nfunction PrivateRoute({ element, isAuthenticated }) {\n  return isAuthenticated ? element : <Navigate to=\"/login\" />;\n}\n\n\nfunction App() {\n  // Define the checkAuthenticated function\nfunction checkAuthenticated() {\n  // Implement your authentication logic here\n  // Return true if the user is authenticated, false otherwise\n  // For example, you might check for a token in localStorage or a session cookie\n  const token = localStorage.getItem('token');\n  return !!token;\n}\n\n  const isAuthenticated = checkAuthenticated();\n  return (\n    <>\n    {/* <Router>\n    <Routes>\n       \n        <Route path=\"/\" element={<LoginPage/>} />\n        <Route path=\"/Main\" element={<Main/>} />\n      </Routes>\n    </Router> */}\n    <Routes>\n      <Route path=\"/\" element={<LoginPage />} />\n      <PrivateRoute path=\"/Main\" element={<Main />} isAuthenticated={isAuthenticated} />\n    </Routes>\n    \n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}